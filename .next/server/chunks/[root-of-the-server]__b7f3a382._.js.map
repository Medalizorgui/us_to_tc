{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/dali/Desktop/pfev1/lib/db.ts"],"sourcesContent":["import { Pool } from \"pg\"; \r\n\r\nconst pool = new Pool({\r\n  user: \"postgres\",\r\n  host: \"localhost\",\r\n  database: \"us_to_tc\",\r\n  password: \"admin\",\r\n  port: 5432, // Default PostgreSQL port\r\n});\r\n\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":";;;AAAA;;;;;;AAEA,MAAM,OAAO,IAAI,oGAAA,CAAA,OAAI,CAAC;IACpB,MAAM;IACN,MAAM;IACN,UAAU;IACV,UAAU;IACV,MAAM;AACR;uCAGe","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/dali/Desktop/pfev1/app/api/user-stories/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport pool from \"@/lib/db\"\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const projectId = searchParams.get('project_id')\r\n\r\n    const client = await pool.connect()\r\n    try {\r\n      let query = 'SELECT * FROM user_stories'\r\n      let params: string[] = []\r\n      \r\n      if (projectId) {\r\n        query += ' WHERE project_id = $1'\r\n        params = [projectId]\r\n      }\r\n      \r\n      query += ' ORDER BY created_at DESC'\r\n      \r\n      const result = await client.query(query, params)\r\n      return NextResponse.json(result.rows)\r\n    } finally {\r\n      client.release()\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching user stories:', error)\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch user stories\" },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json()\r\n    const { project_id, title, description, acceptance_criteria, business_rules, status } = body\r\n\r\n    // Validate required fields\r\n    if (!project_id || !title || !description) {\r\n      return NextResponse.json(\r\n        { error: \"Project ID, title, and description are required\" },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    const client = await pool.connect()\r\n    try {\r\n      const result = await client.query(\r\n        `INSERT INTO user_stories \r\n         (project_id, title, description, acceptance_criteria, business_rules, status, created_at, updated_at)\r\n         VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())\r\n         RETURNING *`,\r\n        [project_id, title, description, acceptance_criteria, business_rules, status || 'draft']\r\n      )\r\n\r\n      return NextResponse.json(result.rows[0])\r\n    } finally {\r\n      client.release()\r\n    }\r\n  } catch (error) {\r\n    console.error('Error creating user story:', error)\r\n    return NextResponse.json(\r\n      { error: \"Failed to create user story\" },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const body = await request.json()\r\n    const { id, title, description, acceptance_criteria, business_rules, status } = body\r\n\r\n    // Validate required fields\r\n    if (!id || !title || !description) {\r\n      return NextResponse.json(\r\n        { error: \"ID, title, and description are required\" },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    const client = await pool.connect()\r\n    try {\r\n      const result = await client.query(\r\n        `UPDATE user_stories \r\n         SET title = $1, \r\n             description = $2, \r\n             acceptance_criteria = $3, \r\n             business_rules = $4, \r\n             status = $5,\r\n             updated_at = NOW()\r\n         WHERE id = $6\r\n         RETURNING *`,\r\n        [title, description, acceptance_criteria, business_rules, status || 'draft', id]\r\n      )\r\n\r\n      if (result.rows.length === 0) {\r\n        return NextResponse.json(\r\n          { error: \"User story not found\" },\r\n          { status: 404 }\r\n        )\r\n      }\r\n\r\n      return NextResponse.json(result.rows[0])\r\n    } finally {\r\n      client.release()\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating user story:', error)\r\n    return NextResponse.json(\r\n      { error: \"Failed to update user story\" },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const id = searchParams.get('id')\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: \"User story ID is required\" },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    const client = await pool.connect()\r\n    try {\r\n      const result = await client.query(\r\n        'DELETE FROM user_stories WHERE id = $1 RETURNING *',\r\n        [id]\r\n      )\r\n\r\n      if (result.rows.length === 0) {\r\n        return NextResponse.json(\r\n          { error: \"User story not found\" },\r\n          { status: 404 }\r\n        )\r\n      }\r\n\r\n      return NextResponse.json({ success: true })\r\n    } finally {\r\n      client.release()\r\n    }\r\n  } catch (error) {\r\n    console.error('Error deleting user story:', error)\r\n    return NextResponse.json(\r\n      { error: \"Failed to delete user story\" },\r\n      { status: 500 }\r\n    )\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}